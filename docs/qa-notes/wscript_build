bld.recurse('../seano-export')
if True:
    from waflib import Task
    import datetime
    try:
        from html import escape  # python 3.x
    except ImportError:
        from cgi import escape  # python 2.x
    import re
    import subprocess

    markdown_compiler = ctx.srcnode.find_resource('concordia/tools/markdown/Markdown.pl')
    def compile_markdown(txt):
        p = subprocess.Popen([markdown_compiler.abspath()], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, _ = p.communicate(input=txt)
        if p.returncode != 0:
            bld.fatal('failed assertion: %s' % (p.returncode,))
        return stdout.strip()

    def compile_single_line_markdown(txt):
        txt = compile_markdown(txt)
        if not txt.startswith('<p>') or not txt.endswith('</p>'):
            bld.fatal('failed assertion: ' + txt)
        return txt[3:-4]

    jira_url_regex = re.compile(r'^https?://[^/]*jira[^/]*/browse/([A-Z]+\-[0-9]+)$')
    redmine_url_regex = re.compile(r'^https?://[^/]*redmine[^/]*/issues/([0-9]+)$')
    def compile_ticket_url(url):
        m = jira_url_regex.match(url)
        if m:
            return '<a href="' + url + '" target="_blank">' + m.group(1) + '</a>'
        m = redmine_url_regex.match(url)
        if m:
            return '<a href="' + url + '" target="_blank">' + m.group(1) + '</a>'
        bld.fatal("Don't know how to display URL in QA Notes: %s" % (url,))

    class qa_notes_render_task(Task.Task):
        vars = ['CURRENT_SOURCE_VERSION']

        def keyword(self):
            return 'Rendering QA Notes'

        def __str__(self):
            return ', '.join([node.path_from(node.ctx.launch_node()) for node in self.outputs])

        def run(self):
            release = self.inputs[0].read_json()[0]
            with open(self.outputs[0].abspath(), 'w') as f:
                f.write('''<html><head>''')
                f.write('''<meta charset="utf-8">''')
                f.write('''<meta name="viewport" content="width=device-width, initial-scale=1.0">''')
                f.write('''<title>QA Notes for CE Mac Client v''')
                f.write(escape(release['name']))
                f.write('''</title><style type="text/css">
.internal-short {
    display: inline-block;
    margin: 0 0 1em 0;
}
.ticket {
    display: inline-block;
    margin-left: 1em;
    font-size: 90%;
}
.testing {
    margin-left: 1em;
}
p {
    margin-top: 0;
}
ol, ul {
    margin-bottom: 1em;
}
</style></head><body><h2>QA Notes for CE Mac Client v''')
                f.write(escape(release['name']))
                f.write('</h2><p>Commit <code>')
                f.write(self.bld.env.CURRENT_SOURCE_VERSION)
                f.write('</code>; built on ')
                f.write(datetime.datetime.today().strftime('%m/%d/%Y at %I:%M %p %Z'))
                f.write('</p><h3>Changes since version ')
                f.write(escape(' and '.join(release['after'])))
                f.write(':</h3><ul>')
                for note in release['notes']:
                    f.write('<li><h4 class="internal-short">')
                    f.write(compile_single_line_markdown(note.get('internal-short', {}).get('en-US', [None])[0])
                            or '<em>Internal release note missing</em>')
                    f.write('</h4>')
                    for t in note.get('tickets', []):
                        f.write('<span class="ticket">')
                        f.write(compile_ticket_url(t))
                        f.write('</span>')
                    f.write('<div class="testing">')
                    f.write(compile_markdown(note.get('testing', {}).get('en-US', ''))
                            or '<em>QA Notes missing</em>')
                    f.write('</div></li>')
                f.write('''</ul></body></html>''')
            return 0


    t = qa_notes_render_task(env=bld.env)
    t.set_inputs(bld.env.SEANO_EXPORT_JSON_NODE)
    t.set_outputs(bld.path.find_or_declare('qa-notes.html'))
    bld.add_to_group(t)
