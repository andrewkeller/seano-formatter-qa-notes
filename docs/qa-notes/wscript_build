bld.recurse('../seano-export')
if True:
    from waflib import Task
    import datetime
    try:
        from html import escape  # python 3.x
    except ImportError:
        from cgi import escape  # python 2.x
    import re
    import subprocess

    markdown_compiler = ctx.srcnode.find_resource('concordia/tools/markdown/Markdown.pl')
    def compile_markdown(txt):
        p = subprocess.Popen([markdown_compiler.abspath()], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, _ = p.communicate(input=txt)
        if p.returncode != 0:
            bld.fatal('failed assertion: %s' % (p.returncode,))
        return stdout.strip()

    def compile_single_line_markdown(txt):
        txt = compile_markdown(txt)
        if not txt.startswith('<p>') or not txt.endswith('</p>'):
            bld.fatal('failed assertion: ' + txt)
        return txt[3:-4]

    jira_url_regex = re.compile(r'^https?://[^/]*jira[^/]*/browse/([A-Z]+\-[0-9]+)$')
    redmine_url_regex = re.compile(r'^https?://[^/]*redmine[^/]*/issues/([0-9]+)$')
    def compile_ticket_url(url):
        m = jira_url_regex.match(url)
        if m:
            return '<a href="' + url + '" target="_blank">' + m.group(1) + '</a>'
        m = redmine_url_regex.match(url)
        if m:
            return '<a href="' + url + '" target="_blank">' + m.group(1) + '</a>'
        bld.fatal("Don't know how to display URL in QA Notes: %s" % (url,))

    class qa_notes_render_task(Task.Task):
        vars = ['CURRENT_SOURCE_VERSION']

        def keyword(self):
            return 'Rendering QA Notes'

        def __str__(self):
            return ', '.join([node.path_from(node.ctx.launch_node()) for node in self.outputs])

        def run(self):
            _next_uid = [0]
            def get_uid():
                _next_uid[0] = _next_uid[0] + 1
                return _next_uid[0]
            releases = self.inputs[0].read_json()
            with open(self.outputs[0].abspath(), 'w') as f:
                f.write('''<html><head>''')
                f.write('''<meta charset="utf-8">''')
                f.write('''<meta name="viewport" content="width=device-width, initial-scale=1.0">''')
                f.write('''<title>QA Notes for CE Mac Client v''')
                f.write(escape(releases[0]['name']))
                f.write('''</title><style type="text/css">
.release-head {
    background: #E9E9E9;
    padding: 0.5em;
    margin-bottom: 0.2em;
}

.release-head > .release-name {
    display: inline-block;
    font-size: 110%;
    font-weight: bold;
}

.release-head > .release-since {
    display: inline-block;
    margin-left: 1em;
}

.release-head > .show-release, .release-head > .hide-release {
    float: right;
}

.internal-short {
    display: inline-block;
    margin: 0 0 1em 0;
}
.ticket {
    display: inline-block;
    margin-left: 1em;
    font-size: 90%;
}
.testing, .technical {
    margin-left: 1em;
}
p {
    margin-top: 0;
}
ol, ul {
    margin-bottom: 1em;
}
</style><script>
function showRelease(id) {
    document.getElementById('show-release-' + id).style.display = 'none';
    document.getElementById('hide-release-' + id).style.display = 'inline-block';
    document.getElementById('release-body-' + id).style.display = 'block';
}
function hideRelease(id) {
    document.getElementById('show-release-' + id).style.display = 'inline-block';
    document.getElementById('hide-release-' + id).style.display = 'none';
    document.getElementById('release-body-' + id).style.display = 'none';
}
function showTechnical(id) {
    document.getElementById('show-technical-' + id).style.display = 'none';
    document.getElementById('hide-technical-' + id).style.display = 'inline-block';
    document.getElementById('technical-' + id).style.display = 'block';
}
function hideTechnical(id) {
    document.getElementById('show-technical-' + id).style.display = 'inline-block';
    document.getElementById('hide-technical-' + id).style.display = 'none';
    document.getElementById('technical-' + id).style.display = 'none';
}
</script></head><body><h2>QA Notes for CE Mac Client v''')
                f.write(escape(releases[0]['name']))
                f.write('</h2><p>Commit <code>')
                f.write(self.bld.env.CURRENT_SOURCE_VERSION)
                f.write('</code>; built on ')
                f.write(datetime.datetime.today().strftime('%m/%d/%Y at %I:%M %p %Z'))
                f.write('</p>')
                release_count = 0
                for release in releases:
                    release_count = release_count + 1
                    if release_count > 5:
                        break
                    release_div_id = get_uid()
                    f.write('<div class="release-head"><span class="release-name">Changes in ')
                    f.write(escape(release['name']))
                    f.write('</span><span class="release-since">(since ')
                    f.write(escape(' and '.join(release['after'])))
                    f.write(')</span>')
                    f.write('<span class="show-release" id="show-release-%d" style="display:%s">' \
                            '''<a href="javascript:showRelease('%d')">Show</a></span>''' % (
                                release_div_id, 'inline-block' if release_count > 1 else 'none', release_div_id))
                    f.write('<span class="hide-release" id="hide-release-%d" style="display:%s">' \
                            '''<a href="javascript:hideRelease('%d')">Hide</a></span>''' % (
                                release_div_id, 'none' if release_count > 1 else 'inline-block', release_div_id))
                    f.write('</div>') # end of "release-head" div
                    f.write('<div id="release-body-%d" style="display:%s">' % (
                            release_div_id, 'none' if release_count > 1 else 'block'))
                    if not release['notes']:
                        f.write('<p><em>No changes</em></p>')
                    else:
                        f.write('<ul>')
                        for note in release['notes']:
                            f.write('<li><h4 class="internal-short">')
                            head = note.get('internal-short', {}).get('en-US', [None])[0]
                            if head and type(head) == dict:
                                head = head.keys()[0]
                            f.write(compile_single_line_markdown(head or 'Internal release note missing'))
                            f.write('</h4>')
                            for t in note.get('tickets', []):
                                f.write('<span class="ticket">')
                                f.write(compile_ticket_url(t))
                                f.write('</span>')
                            technical = note.get('technical', {}).get('en-US', '')
                            if technical:
                                tech_id = get_uid()
                                f.write('<span class="ticket show-technical" id="show-technical-%d">' \
                                        '''<a href="javascript:showTechnical('%d')">More details</a></span>''' % (
                                            tech_id, tech_id))
                                f.write('<span class="ticket hide-technical" id="hide-technical-%d" style="display:none">' \
                                        '''<a href="javascript:hideTechnical('%d')">Fewer details</a></span>''' % (
                                            tech_id, tech_id))
                                f.write('<div class="technical" id="technical-%d" style="display:none">' % (tech_id,))
                                f.write(compile_markdown(technical))
                                f.write('</div>')
                            f.write('<div class="testing">')
                            f.write(compile_markdown(note.get('testing', {}).get('en-US', '')
                                    or '_QA Notes missing_'))
                            f.write('</div></li>')
                        f.write('</ul>')
                    f.write('</div>')
                f.write('''</body></html>''')
            return 0


    t = qa_notes_render_task(env=bld.env)
    t.set_inputs(bld.env.SEANO_EXPORT_JSON_NODE)
    t.set_outputs(bld.path.find_or_declare('qa-notes.html'))
    bld.add_to_group(t)
